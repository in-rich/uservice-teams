// Code generated by mockery v2.46.0. DO NOT EDIT.

package daomocks

import (
	context "context"

	dao "github.com/in-rich/uservice-teams/pkg/dao"
	entities "github.com/in-rich/uservice-teams/pkg/entities"

	mock "github.com/stretchr/testify/mock"

	time "time"
)

// MockConsumeInvitationCodeRepository is an autogenerated mock type for the ConsumeInvitationCodeRepository type
type MockConsumeInvitationCodeRepository struct {
	mock.Mock
}

type MockConsumeInvitationCodeRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockConsumeInvitationCodeRepository) EXPECT() *MockConsumeInvitationCodeRepository_Expecter {
	return &MockConsumeInvitationCodeRepository_Expecter{mock: &_m.Mock}
}

// ConsumeInvitationCode provides a mock function with given fields: ctx, now, data
func (_m *MockConsumeInvitationCodeRepository) ConsumeInvitationCode(ctx context.Context, now time.Time, data *dao.ConsumeInvitationCodeData) (*entities.InvitationCode, error) {
	ret := _m.Called(ctx, now, data)

	if len(ret) == 0 {
		panic("no return value specified for ConsumeInvitationCode")
	}

	var r0 *entities.InvitationCode
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, time.Time, *dao.ConsumeInvitationCodeData) (*entities.InvitationCode, error)); ok {
		return rf(ctx, now, data)
	}
	if rf, ok := ret.Get(0).(func(context.Context, time.Time, *dao.ConsumeInvitationCodeData) *entities.InvitationCode); ok {
		r0 = rf(ctx, now, data)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.InvitationCode)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, time.Time, *dao.ConsumeInvitationCodeData) error); ok {
		r1 = rf(ctx, now, data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockConsumeInvitationCodeRepository_ConsumeInvitationCode_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ConsumeInvitationCode'
type MockConsumeInvitationCodeRepository_ConsumeInvitationCode_Call struct {
	*mock.Call
}

// ConsumeInvitationCode is a helper method to define mock.On call
//   - ctx context.Context
//   - now time.Time
//   - data *dao.ConsumeInvitationCodeData
func (_e *MockConsumeInvitationCodeRepository_Expecter) ConsumeInvitationCode(ctx interface{}, now interface{}, data interface{}) *MockConsumeInvitationCodeRepository_ConsumeInvitationCode_Call {
	return &MockConsumeInvitationCodeRepository_ConsumeInvitationCode_Call{Call: _e.mock.On("ConsumeInvitationCode", ctx, now, data)}
}

func (_c *MockConsumeInvitationCodeRepository_ConsumeInvitationCode_Call) Run(run func(ctx context.Context, now time.Time, data *dao.ConsumeInvitationCodeData)) *MockConsumeInvitationCodeRepository_ConsumeInvitationCode_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(time.Time), args[2].(*dao.ConsumeInvitationCodeData))
	})
	return _c
}

func (_c *MockConsumeInvitationCodeRepository_ConsumeInvitationCode_Call) Return(_a0 *entities.InvitationCode, _a1 error) *MockConsumeInvitationCodeRepository_ConsumeInvitationCode_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockConsumeInvitationCodeRepository_ConsumeInvitationCode_Call) RunAndReturn(run func(context.Context, time.Time, *dao.ConsumeInvitationCodeData) (*entities.InvitationCode, error)) *MockConsumeInvitationCodeRepository_ConsumeInvitationCode_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockConsumeInvitationCodeRepository creates a new instance of MockConsumeInvitationCodeRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockConsumeInvitationCodeRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockConsumeInvitationCodeRepository {
	mock := &MockConsumeInvitationCodeRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
