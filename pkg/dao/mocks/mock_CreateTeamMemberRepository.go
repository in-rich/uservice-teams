// Code generated by mockery v2.43.2. DO NOT EDIT.

package daomocks

import (
	context "context"

	dao "github.com/in-rich/uservice-teams/pkg/dao"
	entities "github.com/in-rich/uservice-teams/pkg/entities"

	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// MockCreateTeamMemberRepository is an autogenerated mock type for the CreateTeamMemberRepository type
type MockCreateTeamMemberRepository struct {
	mock.Mock
}

type MockCreateTeamMemberRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockCreateTeamMemberRepository) EXPECT() *MockCreateTeamMemberRepository_Expecter {
	return &MockCreateTeamMemberRepository_Expecter{mock: &_m.Mock}
}

// CreateTeamMember provides a mock function with given fields: ctx, team, userID, data
func (_m *MockCreateTeamMemberRepository) CreateTeamMember(ctx context.Context, team uuid.UUID, userID string, data *dao.CreateTeamMemberData) (*entities.TeamMember, error) {
	ret := _m.Called(ctx, team, userID, data)

	if len(ret) == 0 {
		panic("no return value specified for CreateTeamMember")
	}

	var r0 *entities.TeamMember
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, string, *dao.CreateTeamMemberData) (*entities.TeamMember, error)); ok {
		return rf(ctx, team, userID, data)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, string, *dao.CreateTeamMemberData) *entities.TeamMember); ok {
		r0 = rf(ctx, team, userID, data)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.TeamMember)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, string, *dao.CreateTeamMemberData) error); ok {
		r1 = rf(ctx, team, userID, data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCreateTeamMemberRepository_CreateTeamMember_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateTeamMember'
type MockCreateTeamMemberRepository_CreateTeamMember_Call struct {
	*mock.Call
}

// CreateTeamMember is a helper method to define mock.On call
//   - ctx context.Context
//   - team uuid.UUID
//   - userID string
//   - data *dao.CreateTeamMemberData
func (_e *MockCreateTeamMemberRepository_Expecter) CreateTeamMember(ctx interface{}, team interface{}, userID interface{}, data interface{}) *MockCreateTeamMemberRepository_CreateTeamMember_Call {
	return &MockCreateTeamMemberRepository_CreateTeamMember_Call{Call: _e.mock.On("CreateTeamMember", ctx, team, userID, data)}
}

func (_c *MockCreateTeamMemberRepository_CreateTeamMember_Call) Run(run func(ctx context.Context, team uuid.UUID, userID string, data *dao.CreateTeamMemberData)) *MockCreateTeamMemberRepository_CreateTeamMember_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(string), args[3].(*dao.CreateTeamMemberData))
	})
	return _c
}

func (_c *MockCreateTeamMemberRepository_CreateTeamMember_Call) Return(_a0 *entities.TeamMember, _a1 error) *MockCreateTeamMemberRepository_CreateTeamMember_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCreateTeamMemberRepository_CreateTeamMember_Call) RunAndReturn(run func(context.Context, uuid.UUID, string, *dao.CreateTeamMemberData) (*entities.TeamMember, error)) *MockCreateTeamMemberRepository_CreateTeamMember_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockCreateTeamMemberRepository creates a new instance of MockCreateTeamMemberRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockCreateTeamMemberRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockCreateTeamMemberRepository {
	mock := &MockCreateTeamMemberRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
